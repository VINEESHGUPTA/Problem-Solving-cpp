  //Sorting based on incoming time - ascending 
  //merging intervals based on previous outgoing and next incoming time
  //TC O(n*log(n))
  //SC O(1)
   
   vector < vector < int >> overlappedInterval(vector < vector < int >> & intervals) {
      // Code here
      vector < vector < int >> res;
      sort(intervals.begin(), intervals.end());
      vector < int > temp;
      int a = intervals[0][0];
      int b = intervals[0][1];
      int n = intervals.size();

      for (int i = 1; i < n; i++) {
        if (intervals[i][0] <= b) {
          b = max(intervals[i][1], b);
        } else {
          temp.push_back(a);
          temp.push_back(b);
          a = intervals[i][0];
          b = intervals[i][1];
          res.push_back(temp);
          temp.clear();
        }
      }

      temp.push_back(a);
      temp.push_back(b);
      res.push_back(temp);

      return res;
    }
