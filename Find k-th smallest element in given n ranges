/*
From the given intervals, create overlapping intervals by merging (Refer to overlapping problem)
Here I have stored the overlapping intervals in res 2-d vector
Once that array is created, it's a sorted 2-d range array from where you can find nth smallest element easily.
*/

 vector<int>kthSmallestNum(vector<vector<int>>&range, vector<int>queries){
         vector<vector<int>> res;
         sort(range.begin(),range.end());
         vector <int> temp;
         int a = range[0][0];
         int b = range[0][1];
         int n = range.size();
         
         for(int i=1;i<n;i++)
         {
             if(range[i][0] <= b)
             {
                 b = max(range[i][1],b);
             }
             else
             {
                 temp.push_back(a);
                 temp.push_back(b);
                 a = range[i][0];
                 b = range[i][1];
                 res.push_back(temp);
                 temp.clear();
             }
         }
         
        temp.push_back(a);
        temp.push_back(b);
        res.push_back(temp);
        
        //res contains overlapping intervals after merging
        vector <int> ans;
        
        for(int i=0;i<queries.size();i++)
        {
            int flag=0;
            int tempQue = queries[i];
            for(int j=0;j<res.size();j++)
            {
                if(tempQue<= (res[j][1]-res[j][0] +1))
                {
                    flag = 1;
                    ans.push_back(res[j][0] + tempQue -1);
                    break;
                }
                else
                {
                    tempQue -= (res[j][1]-res[j][0] +1);
                }
            }
            
            if(flag == 0)
            ans.push_back(-1);
            
        }
        
        return ans;
    } 
